<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的第一篇博客文章</title>
    <url>/2022/01/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6b098351d010979d980b64c10a6b28aceb957d18c5ea634eb0d814272092fd3e">6031008eaf30dfa9f6cee48a6a69006ec6c27df1acca526217b8c2ea8950b3c20fb78496c7ce50f24f16b2a835b738eb81160285e8ce4fc115c8eb9237642dac4f183f8784e7353b0f8fc79625fd1ba60057d4c4ce9d15aea2e88bc13e0403745b43ca1e04c1333012ee40288df77bbbf652db020d5575e9a3ef9e5c695ac72be997b7e38818b7771579bec6d84ada4532faa967bb183a5f43a31d533847f055d444ef58a788615a67dcddd5bf16aab8683299bbe91906af02c06ded9e4f2233d7e7ad31ac33f66a4b0f643222128819f6a66646e9443066ad9aa529be7b4baa49f2bb726f44618c3c20419c0fbe4495045e273cce67dc93842997c1def2333f5709dcba3e7684f88b35f5c271736937a697e86b7dcd4c0992170e81d354947f2bc392e99c490facaab9ed87a90b6ccda6578bb7b9f7920c1c2569a6d57077bf1bc7c611bbb0cc0815ba2d4229599ecfc2b329f0c292635f9b77c7151e47a24d84f36a909851adb01f80ca625c79c85c245a423c77bd8e0be1adc9364c64f4336c668dbfa33f474efa17e14efb04b2c9a0cc8363a3dbee22055d297801182425a90e310bad77d2d08699cfff7a909d8976a1369fedf1889bde5fdc74d0d35e4bdfea46f5878502c6098ca6d70041f5c5d9218c4165dbc3dde69a4edba3fb6d5d564679e6e53b7a2a89a0bcc209dbce6606ccbe96303a8af4f5986aae8a02c7f86df8a7a914e1fe86804d954d82f9244265d12a6b1bc1f58f303a961c97544f1145fcb8448c2af7ccc521a790f044800a7b754b7c9d4352d272379123953f1ad7f9620374efce9c4eeed53f1fe066453bdd990e5c10f1e78125f122cae100afef94d51384ff73ca6f8d30d65e733fe144758af50cb110ec01b011b393e903b1bed6a526f8a3461db681ce783909d04d5fe1e655f9443b249a9d5b32a8fb60346f81434d7208d4d85e997d332c64220a217b786eaa3fc482c2b4d3f8ad74e57141eee4be5f4a03e8ee096e628aa93c9cc7d4d900f8686a918a59228e1fe25cf7c4ddccab8d582cb0fb6e4b67b9523846250c80fd65e0905c9734d9541245f16403d9759d731dadf5e71d8797bcc8d94a15ba989cc969a8045d312fdccab19dde6ff260f3e178518d02ce545f901702eb4467a8706f9b7cef1bcbada69c4a9981779f1cdd06c0f97b2225e177f2803c8915259f23a7e1f4f06eb3f3e6b7c185cf94ec3538bcf7298781a69a70002f09b00629b742e1bf8c8577f0a02a766425289c209a5becc6e1384d8e0464285eb56bb4e348b62c1c5ef056e76111a9c3e0061183dc7ba27e89d4dbda1b95a436e054d781925aae41aaf0af8a11109f66fcfce61ea4b62fd85cdce0a05b7c3068871594a3df843c4d8a4473b39c845bbc89c74f6b31e99235395d124527cdda2c409ec34324935ae849f629f3171892d47e4693835e03aa8684a80ab1fb02729b0f1d4c402ff8a64d9c9979568b013e2b81b6b6624e1b62eed1f6259bd357f561bb81f7ef1c636475eabeac643e1d5a5dca9f17d3991f7920fde7292e29f8acf4865989fa2d9f1a995d6a306c97a356006af93350453c031fb92f3a1d5a751cdd211e34b283a62b3bd204b8d67d8aa82cfb3d793951c04eacb6678971ebd459cbd23787e0814d2850b150f0946feee088153e4878b28bc8cd2c170a1fc9817b049b1ef0f73cd125a5afba2d170b8c49802b3612f28718805554165e393e15c8b3ee5b18ca92fa27d0794c52003a6c810a407b8433abd0f45de5b79ec61eac79200cbdc43bba8494d1c59f60fac65f0ba1106ea850a1175d104eefcede86920a00567e70b285821cd677489efcbfb9241b4ef0d8f3155f66d33667e5ca3d13e11fe7bd736dd323568f4c9ee4e3a41b1b44ddcff7d4e91aa24126bc37044cac7f7339e8aec61c72e155f4ebd4fb32d67f5b189a236a65fef5c2ac7e4f1b72dbe2e82b43eac40d1be2a4b90e6a65d469d45bfe2d3af0c5ed587c0020331fe53b116e689e7dbcce71607efd5f20ce5e37c81feaf386540fcbe8b59ab5e035e7733b4d43739c50a8a9d27a0f4dd48990d479fba56359de602f2b398934785ad9dd77bf4a3654dc1634d1a1f65c422493226b51cf96e66064b5e428843348b5ad746d1aad5bd8051fe757ff534bb560e954778a6677e9671f1f41a7e68740be6e9a0dafe0594c2e4b215e76a4281e4f412ed1b8a45ab1a9ac8d84ec9ae3c6151906190f82ee6067c1e7046d492f5f465feb90f1ae97949487fef5d8a38676ac357c88af3dac8a663373f24ad0691b4a2b2d83a6c25be990224faf1de234b225c7c51bd11dee050558c2e471f1dfeaf7adab258b958a5d049c4cfd869becb0b3eb313ef77af28186be0079d2076150b79138c9cbd5c12acaca2e636cac326eb5b655d4f1f8eaae6dc18a76230411678e7b15a26939d0d889cc10a201d529a95977449cebae178a749793ef401e5a71e3b897f2f726dd92159a2f39b8db17cc768fc05116c094ea599a115dc115a9c9b6a70aaa7fa03b2bcebec107ee1579cb57359b8b56957e073aab4b9a85e9d29c34798927410e3799b4e83502b744cca29dc43fcfbd75959dc3de9e394b7378045509b50e6ecfedbe123147bfeff2069848f481c71830f83f6d1a01a4267f33eb6fcb0ffdfe6e9d9f02f208478b488fd7849145cec8088234e31b7c0eb722d81a7c1c6cedd9524f79cb65eb7f0b5b6645e0faab4eb09851084462229e408691a0aed8ebd00d70b93cede3e36d0d5217ac7fbd5a8f3a833dfd7bb2ffe14737dd530decb58cb0d031e2523a685cc34bc2b611915711137f86590c6d22379d69cb07f1bc1f63b2f9d127b099b7237499b5da3f1abec98017211ed2e3b2acd70da49a32609e43786bad7f90b9f7aa9756b843a20096cc2e597e9b99925ae4dfa88d0c014828edbf28d7f074ad134f0a4d01e4b306e0c8536d65c606544dde21024bc143b069e9bb3adf916c68e2d79578455d0353c241f3016eb64919ad4f12fbf5169e4195bb0bee999a94bc544d8751acd30eb61710c9eb0f004c31ed0aae1497a4b925ffcd0641c463a5c5505c731deb74b6793e76aac58ba5505cf7e94b9156a83b6ccee97bdf0cccc1e63f4171ff6ed71270304cc599e568d93bd5da44dc7cb20246ad52667ef34beac4ea349717bd3939d2a1d927a4d856005dbc67a2b1ef0a037baf5085d7d85af61ba715dbed3bca7fe427fd5218bcd41a36e929d6dcf7d613f82d345eebb3a11d40f4cde87593fc9df534e26f0bc4a12e116c0bbc948752b8ef301618afe7d918da38b5b954888283dee944455cdf9e33c09ae5a08ef79ec9603c2f47e7cedd0bfca9ffbeb46e016dd4a78bd4a1bf4fcf8685ab13ae2426c625f3c64481e82581fd0c32e942c220de163992ca440082689414875c031372e1ae956012e9a0dcd2071da19dd26619a54bf8827ebd573103f2b4d6890aba638f0e1a268a736e11789b8ba3ba6134226aee9f28587b5455969cc7007707151c269e6804c291099989a146f1f9e9c27fde07f75bc02200220071ee78666002cac49d3697c699e2c260f622ae7d46e6a20282f8b54d7b67d2efd8f27d986efc2520c4bee27ea74b8eb33222df772af286cb2a1e3efcf9ad9b8bbef61d25895aff6cf219a694f9e5015924d98de844e1ded9869d20d4f2e451f29ded6422b9b54aed95b86701bea4f4432fb273cf4732e967bdd6f868642d8d7497684b9b26ce2d1d9298905ca7085b20b8892525ef2dd35ce4dae446f8c2d6c1c804f65e9d6b99629aa0ced3e63dee7cea1a7c22e5d75c47be705ac04a129792405c98e610348a9b93782e9ca8e201a058b5c93ded3483b495b195ba1c31b82f81a3bb1ae44f1ce376166408f9d129bb756b6d6ed6670f9b5e46e63eb3ed40f0066300b4e1336b4c5be528175f7dc41ed83e3318e0e8a0e53a21ba20d4ae50ee0a711d9c0a824337df78218bd3ff277dfaec75d90a3619355c83571835d4d2e0b1cfd19ac726d3ce31b1c47f6371ca4bac503a581de98f16d74905f07f1740b5cb354c76c396c92d58e4d5a77d8e5048419249d033399a40aa800e47e828f8daca792661e69987eb0cf9fdcbce2502ca009bb6d0256d43e70684f4bfda21ef79b0203a266025ec11848a14536bdb4ba678a6aa424702d23320a7cfe0b91b656cafbb9b2353403ef3dcee0712f1ec6c64acc65815b13640613b1c0c3d4f38768d8d24263e016cbe275227fa7eeeef08ae408e072d960a06634beb05547f61f3cd942d286eaaad3af7504bec916b6e548b627ee5960687fcf42802a810cd81141a9b4fad29e8bb420ba07a6740b80b4ec8d97b27956f42b4dc9d6ad0c48e1b4f99164d04fd0461621f21129f498901c4161971d4b4fa1bd5f5c70b78241b661f4369a49a078dcd3d8531076bc64efe311d41e60a82e89010333a7339e8fcbabab1037155153ab3377683b6e369ea6514228672d0741d990555b5219012e821a9bc21422bf157d24f544d9df6b4c0e46f4c34bd46ec4e60d89a0d70163a2ce571da81284fd2fc4ca09989739528af80f672fe659474990ea1aa4cd0482e4bd92fdfcbed68bb35e455a04cb357102f14e387dc30e71bb8a871d0bee775e18008764c2b4c7dc372b8566ba374da11229b9576263a1bde51fbe56a09ea3c151f1cc6d69ba9d84150ffe8c27698b740e920c9ad8ca88b98227146546acc5c2cf619e8233886da88a116e06cffbc66495d6378688ec6db4248966d6b73ec80d1eedf4bb52d9564be392901fa05f9c06507a00f0cfa3aea6a5ef62b2aa2e8298f6ef12eb06a1a1957b8b9f792b59b0e18d13cb28cb67fbd70991d30ab779bdf12e0c12a1ffa68e11b27d98f4ef67f242f66d1175dcb043b72abb8ded283aecaa43418eb43da2c9c4aad4121feb05e46a4111471be0320e35f4841fa00a83b7741b580f08fc666484c5c87f2c042cc2d3e53c5b645000723d808202b8c4b87be896716778e2413449a040fad7236f53cadf9be870652f1071644a80bf843fc9a0806a6571296d9457df8d0add96139dca36b4386a79efda0172a9056133174ec2a448001ed1107eec17d2d5f0361e9fe3b1aed99716518ce846253de0b37cebea9c9f975f640e8dc116602a6b18bf4086340996fbb93845ab81e86081bdf0e94dbd607d0f863a393361df0f6d2d56e065e214650119d05daf8d5e26a386867ed1ac84eb03e7347c67b311ae0b83f7995b85eeac571f4163c4508d41fbb49ffa1c525004fdc8db45fe5ad9377957e048e00bc5da0c324e63a219d6f453807f262b32d29620410d0d15b510bfd444db8baeb31b1f328c66a8e9d8575dccf0ab11539c82931fe75882350891d34ac082d91bd38a27eb359e73fef0db714c5a42da881252c7867e429178275b31ec44cc69f2ef77f5c3facd6e4fbb76932a112358871501d2f862cd54dfcdf3e7debf76963ab2d2efb661d3c87b24e116db7baa7ebf522f48f74e5bb48f67b30e69a2398cdd3612bd5db00180849612ac1e0963c9c30617a736ea45201fe755f37b295ceda7dd88dd5655873f6ebef3b80175a154a163e70190708644c4700e8b273d9bceb9be82445296b7e335f64f7c1a431e22db990f582bc7b865bf9f69444d47b3c10748111efb1510fbece66d5775c43f3343d4d8e7aed0af9b8d2da87a595cd060ff185a2487948deb07c162de5f132d72d9cfd166a6e881aedf2123e042fae4418318a63b6ba92f6db825875f8c5937094310ea42b508fadd27298f0773047fbc463e5cd9ee5cf1b8ee2d6df448e53a24696e1e5232f82dfdc678dbebd35959d7a50a052ba02b27cdd8b021719a8fb273cf3651fcad06603300430f55c6df01d55bd7e44fd4a41bbfc3b9c2c0f144933a35b882fe81e14a003dca623633826fb0eb0e57f7bc4a4398f90047c6b2bb623f78d46e477c7d48f9ec523990138e8219889dbcd55247a88a267b9d2b1d021e12f337eaeb82f632f8a81d16011a0d83dc5962edf71c0885d08c1c7a1bed13cf41d382ed926a2c16bc8555e6e40e5908298ebd3933d3f2e0f53f23b8d08cdf90c1b47977592e8ea632077c9dff8e30fd1f4e586d5c89b6ec68cfb7031b1e4987af7623404e05642350dde4ad83c13c70fd4d3f4503e2fc6c21392ff578aafce753930f389790136ee1fc0d4188b4dbe3c2261596fc36428c378181c72335b2e9a5bf0d1408f67c076ff39d23a268c083aad85617ba4efd545359492bf31a0dccc0c5ecf611f34ee41822c9c1809bde93830b0ebcb6065df0404fba65a15041812376b4f238e7745d5f08118163012e38489dfba89bbc696f46a6c12d3ca9b7356db1bea593c8f98e3c33ee151b0927c6967f1f83d51053f4fd362a73e8da8a8aee61d4eb1d36eba2299ba2d1e7f4292ba4fe45613b6983d7e15da9c778aad7753da649a9ee4d49dc6ebd241d11509de9bf0e4c48f903514dd1620503c2d094960c5d85d8e920e8766a3acddd159bc9c87a99f0c348b48a846773f7bfc14314f12bebb55d82782b3ddf643eaa7c81cf4d9071f12287e7de33d2b27049bd6e71d1ab695f1c93cb7d5962892f8d58b0fdb9adf69f6a351ed6f5a2463d098ac29a0f30c94ae041d89653a520cd91657b6e563a7ccca2114baba145c6581e5d30347aeca757cbf049b246b71af6e128086d8f4354f5c91178e9dd4ab302d730073955e7dab23535cf9828b813f63d05514036243315850ed5b5f4f5185db23e70805fcdff8a3a48840845f998c55b42044c33a614f579defa81bff779b595e806a2ae2b7b0608b35265b50cca9b04c06163b6a29936e148ece45517333591fff4ec579af0ea83f9505d80095eba9499298910fe5b66507fc6e05bd7ca8b80a66d526ffd4d5458c305fe7c18549ba8cfd3f9e3bd7b52ed7148a7d3c7a67cb2c5649f592b90c7325744656827d1bae13db84fb0cd49cd066c2ac9953de52642eda6da363b0b1079574caa51d1ddb134dbf69254cdf9bb60fd8764778fdfe27ae18887f76efc3afd39105cf5510f3778892ee72a8f9964c8b83973567ea6ebdd4f07df5468dcb52c1c179291b5b18672a7c35ed625331426f8ad0490c657f11a12e950c1f4f3f325a71cba9c076b1620cb54150e2f9a1823f1a7916f1bedfc9295b4c77b51084d25bcc09422b04c8c664db984b32c7db571a0f45c7f7443fee74e79b58f5b68f609359ee0d879f84d67c488e9c33ffbe87018043f5972b3875f9d37d45d95c5bfaa56f0a2e36069c865c0992ab53e233878020212570b8ebcb336f88ef54d52667718ad6245e70b42942b149d4d61e2974f4103ac141a4b378e5a97f84fe69841ae52340fc0f0fbe7242d6e69700c5832db032c420b7ed7e3a55540f70a11686b0c886cbc2afead9d8ed0167eba1b014b92a93428dffef59a202b60e0702bee691e6ea5f4802661bbf2e0a2812b91441663e396d9918373c219a04bcb9dd6df0f4f9bf4b81b0b7153f2ee7cf9dc1f7b1d42eec874a1a694f755de06ea9c0aced249c2e146b36e579019feb9843c15626a765225fb129a1ed0beb59a4ede9a86ca7100cb6b30f656d459e836ba318556ba9a1173abd111f0e0aa978fbce08979fe18197cfb671c1ef9db18fce15d0f26640d87a6debe6d7c7f8b6d3efddf09ecc1199c7b1b9dbe65e4551733a5be22ae69c01e1b8655cf4d57e3d54438cd39051ede1b885deaed1333a4d552c6b6191a78b3078bc9210632ae9339f310e56ca4f6f199011c62da5eba487b0147dd69383dc50b83579460782f1bd033cc83bea6996e2913914d95f61b590c9e548d0c14c5ba980af96865c4a1253b529d8d9b3863c8566f9989ed31b8fc0f72723d33024327c4db8909bab3e61afd0d20a2c01c3a2ce759a8e8e263626f5b42783f693b21dae4b3d0e1e501b2f705002aa3de13ebd8d3daf3e2b1996e9eb9ffc325f62fcb2bac6c679e6866b1dcc75f1577b2909c90c2687432db37f068fad0f025194eaf9e4c00a695d666357678dabe9bc4c4f052ca8ef10cc41ee8077f98da774a1e5ae9f5b8ce08244607e22be8cd540e7d57f05712538e4f8647175b0beea9c7414cd69741e43de7dd866ebe3f0d8b8992a17d21df6020477d2ca618f6f35af8880c2aa24537506060a65351a339956e4c2447d7a3ed149f6ac5d653c681d8fecae28c77503da125128d94ca41fe35691ef966314f7cc772acb3ed2d5c06a85159512a778b173f1138398b42585728f0fe01ce40ad7b0edc97f37991c6c23fe6abdd89a9cd84f9fe4a0c2aa2ecae80f59295bb33ef906c066ae52c09dc4d5b6a73e81e70ce8ad8598332905089906e8dc7e931dc8a4a7a9995c57cf966fe8f61e7037e672a13e7a65e6117098ba8b945ff6927f6a8e14a49147a968f054c544e573be821e8e54fa9519cfeb265f54eec53e266ed874b7d12bd3e35bee62b4b5655c7c1610cc1acb926a1f0106e4e0c8891b68afad941a08021ac325e37c795177a79a7df090694c24f56212063f077dd3caf0c1f682d8b228fbf21b07c3d268d5f38985a9c699e17ebdf3ac5b2f5b96bfde615607fad9122f745999c70e0f91702cae2df96df0465ba5903d5ef234b749151e4e9b44f5acc5653b61c325f44dd4889aa2c9757257410ca3ca4f3f09d83d55b029ea10c16c59524a5e2f7efe4e01293aa91e47aa7e5bfe506f9b6273b50579e22c20e0f1b3a6a80e383b794940e32345829943c9820b641457504e54ae1247a46b9ff87984062a2e0c5b153fa01823a4d09721c8034be74c0891b48fd332287be20f36d117fcdb5057f237a5442b65a5ae73a36e3673ce0680779f212850e8e4f8042216d0fe82b6f76bdc474d207ea972ebb6342e9ee2aaa884b608ce595ba36eb929e011c8850329f6b33ea2500b10d879514d9e04caaaa0dedbbbce1680a170d49fb717994e337ded4f7467ab27656b428db762601b51443859ac70f08872d06f63ec698d95d63cbd5817ea7985772997fee56cd3f95ed90f2f733ff3a25cc5a4887228f15c18b665eb5c7cac3482778cb6d664a9470f9db976e78f7abe72111e60c89457e6eb510dc3d75dd32cc14ca27d52e3c70fce25c5f2644eef14b985d5dbae1fb69ffa6194110fe1b79d6299dbbe84e05ae06307a2dcea1d09e0ea8dd1864c37d843a0fee6feae5772666e23353fda442fe6f1e0ce1ec44e103ead5b579bfa4d322538d3b410bb0369de8688d7f9c8f4e7e3fa8daf78ffb669d1ba7bb3a3a06df6ce468968cf56e07bc3f2cb8d04efea8bbf6b234533f2c461cf4459f0f434651e50940ccff297b79ef00d02d09cc427d80cf7b0c861fb5208f59b570dbc4fb8d89205050c6a006d822ecaaf9ea00e916a3587798fbdb13b768c498e43efcc11a7d465e5ae804ed07df5743ea8c88ae5ddc1991ff622ae372528619642a43df51bf66d05e5284fe50ee3c1029526e5e0eda6091fe8f85f0f56439441166ac9cee8d5b7a70a7738421e82f5b56026eaabc81a1d9465e18d32a88259817f990722fbb14e5b801b28b27355ad84af6fc19b095152a751aa4b793e6cf2fb21a2ae19af8536381087b3d052d845f1b294cd34406781d60506e0e42567d0fcf67d3be8a271fa3bdadc15f1afeb10d73f1d9166d8ac5f600f289568f410885440a4200948cd22534707c17a85a06cb5c7cfa05ad4a2376228e3ecdf61f56f5d1f26daaa7b7709d9c7e2c74e8b8d73bd87c8895634adea0609b507af4b3f4cf152110e141b28f3670929009eb066bd3e19616c2b0b040b4c6619117819ed9f66d30f1c219d5f2b8353f74de447f0b3fd06833d1d65f4e4369c6974dd25ace18741a11489fcc046a538d1ef66c27f979e55ba56a3311a203b94d02e185a409af7bfd12837b45a07205d5ff1f987f9557701841ba4161433b978621ef1f12d05fc1d3bee55a23662f2fb2b3704fe0f6c494c14ad7129cb4d0a053484c5ea6d13c89ada2ea847a973c25b0284eac1fb70cdc0065bdc64f1ab403ee834df551dd770cd65c2dad9a78c489d51cd1a067228f8c33e2ce34ae7b44d10a303a0f3f3d5a803fda112765df1efceeb3c0fd0e82f1ce1bd77798677bdca9a5757c6d07621c4dbcd6fff8ac77ebbd16ad3d578045d2a2d8916994f6f716c0257563f6e0d9ee651187d670e79ea251a8a85ebcf77abafcf54b65462a147795dbf6fddcfd91903688e30e63a0ec6396fd4ba3349d31ab038de78fb3e00bae0482f8d5a582a04818380ca2fe219ee280594840d42a556e3e2dc0c6bf9482c6f04df889762085f6e509e12d8cf29ea097c962b54f3b2fc34224dbf11fd7ac20981c34ced7d2d750469f4d6cbbb04c386ae8b9d28936b9fab7fac14ddfa625a76a5cee4a42629590581cfb3cf87927ce8b27d30fec1f6d8b28c1b055976721acc22be14e91ae457229b051fb5604f7d9a83f8deea6d00870ed855b38cc97d82c58d6807ce58b4e5c2c13538f3cee6a9a9bce3bebf1685a0d47cc2eeb6c2fc9ef91cfd610204e96547e378e1f683d39fb18e27143273e84071711d56ad70bc6704c719e8d507ad2101eb53b928ce26a1b2758496c9459eba0f886875bdb47b9603b024cadf4e430f792e264ef945fbe16df3325f6e3c5fb66aaca04315b33372dcc1af0476189edd1c6f374f36b341827e5db6a8675804e3cc359e95d7b5f1f93cdd800689a422d44806f4ce091a684717201015e149ed9db995b9975e78df70972de3e7522e25cad4206822686eb8827f079b8e14e884af9b9eee015a98a479722e929bd1185260c7b0d94f26d953690a6358be52f3df31c920a325297f5c1e1e59d36a8b69e81ab46b794766d395c07d1ea356b6eb602bb6dd83fb87c5497fe5ad00b8afcce416a42647505f181574e7c9d8cad0ad8cff97aec78ce696ef36fee3401434fb7321791521c715a0877d16bca0405b9eb471965f929a1ea97721fb9b840fb759daa21a657448402256502372a088d8aec269c7c6fbbb5462b364031fd5f6ae71ff9475df1092f1c08085603e3745d20e21783991b897ba29a2ada3ee503b02d08d674f5421b6f30fe0719fb8bc82643357f3fa20</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Welcome to my blog,enter password to read.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>技术干货</category>
      </categories>
      <tags>
        <tag>博客 Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Github博客搭建教程</title>
    <url>/2022/01/24/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>  搭建这个博客的目的是想把自己学习的笔记、读书的笔记等等存到云端，相当于一个笔记本的作用，当然了，搭建博客的过程也可以让给我学到很多东西。我想很多小伙伴也想搭建一个属于自己的博客吧，那我就在此稍稍总结一下具体的搭建过程，更多的个性化设置还需要你自己去摸索。</p>
<span id="more"></span>

<p>​    最后，这个hexo博客的搭建是基于windows 11系统的，各位小伙伴可以作为参考。</p>
<h2 id="2-小知识"><a href="#2-小知识" class="headerlink" title="2.小知识"></a>2.小知识</h2><p>  搭建之前，你需要了解一下我们搭建博客需要用到的框架。</p>
<p>  什么是Hexo？</p>
<p>  Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。它是基于Node.js的。</p>
<p>​    现在来介绍Hexo的命令</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;我的博客&quot;</span> == hexo <span class="keyword">new</span> <span class="string">&quot;我的博客&quot;</span> #新建文章</span><br><span class="line">hexo g == hexo generate #生成</span><br><span class="line">hexo s == hexo server #启动服务预览</span><br><span class="line">hexo d == hexo deploy #部署</span><br><span class="line">hexo clean #清楚缓存</span><br></pre></td></tr></table></figure>

<p>​    什么是Node.js?</p>
<p>​    Node.js发布于2009年5月，由Ryan Dahl开发，是一个基于Chrome V8引擎的JavaScript运行环境，使用了一个事件驱动、非阻塞式I/O模型， 让JavaScript 运行在服务端的开发平台，它让JavaScript成为与PHP、Python、Perl、Ruby等服务端语言平起平坐的脚本语言。</p>
<p>​    什么是Git?</p>
<p>​    Git（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1] 也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p>
<p>​    什么是GitHub？</p>
<p>​    GitHub是一个面向开源及私有软件项目的托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名GitHub。</p>
<h2 id="3-开始搭建"><a href="#3-开始搭建" class="headerlink" title="3.开始搭建"></a>3.开始搭建</h2><p>​    在开始搭建之前，我们需要先安装下列应用：</p>
<p>​        1.Node.js</p>
<p>​        2.Git</p>
<h3 id="3-1安装Node-js"><a href="#3-1安装Node-js" class="headerlink" title="3.1安装Node.js"></a>3.1安装Node.js</h3><p>​    百度搜索Node.js，进入官网下载长期维护版本，这里附上链接[Node.js](<a href="https://nodejs.org/zh-cn/">Node.js (nodejs.org)</a>)</p>
<p>安装选项全部点默认就行，一路next。最后安装好了之后打开命令提示符</p>
<p><code>win+R</code>,输入<code>node -v</code>和<code>npm -v</code>如果出现版本号，那么恭喜你，安装成功了！</p>
<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/CDN-jsDeliver@1.0/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/image-20220124203355332.png" alt="img"></p>
<h3 id="3-2注册Github账号"><a href="#3-2注册Github账号" class="headerlink" title="3.2注册Github账号"></a>3.2注册Github账号</h3><p><a href="https://github.com/">GitHub</a>,点此进行注册，注册完成后，右上角点击+号新建一个仓库<code>New repository</code>如下图所示<img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220125214727.png" alt="image-20220125201057391"></p>
<h3 id="3-3安装Git"><a href="#3-3安装Git" class="headerlink" title="3.3安装Git"></a>3.3安装Git</h3><p>百度搜索git官网下载，这里附上链接<a href="https://git-scm.com/download">Git</a>，安装时还是选择默认，最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，安装完成后在命令提示符输入<code>git --version</code>来看看你是否安装成功！找到你的Git安装路径<code>D:\ProgramFiles\Git</code>打开<code>git-bash.exe</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行.</p>
<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220125214727.png" alt="image-20220124205135721"></p>
<p>打开Git Bash，设置user.name和user.email配置信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>生成ssh密钥文件：</p>
<p><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code>然后一直回车就行了，接着找到.ssh中的id_rsa.pub密钥，我的如图所示</p>
<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220125214735.png" alt="image-20220125201549767"></p>
<p>打开GitHub-Settings-keys，新建new SSH Key,Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。在Git Bash中检测GitHub公钥设置是否成功，输入 <code>ssh git@github.com </code>,这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>
<h3 id="3-4添加淘宝镜像源"><a href="#3-4添加淘宝镜像源" class="headerlink" title="3.4添加淘宝镜像源"></a>3.4添加淘宝镜像源</h3><p>在终端输入<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220125214743.png" alt="image-20220124204234544"></p>
<p>最后输入<code>cnpm -v</code>来看一下版本，看是否安装成功。</p>
<h3 id="3-5安装Hexo博客框架"><a href="#3-5安装Hexo博客框架" class="headerlink" title="3.5安装Hexo博客框架"></a>3.5安装Hexo博客框架</h3><p>首先新建一个博客文件夹，用来存放自己的博客文件，我的是这样的<code>D:\ProgramFiles\Blog\zrhcode</code>。在git控制台输入<code>cnpm install -g hexo-cli</code>安装博客框架，接着输入<code>hexo -v</code>检查是否安装成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220125214748.png" alt="image-20220124210511079"></p>
<p>切换到你刚新建的blog目录下,如<code>D:\ProgramFiles\Blog\zrhcode</code>,来生成博客目录，在git控制台输入<code>hexo init</code>初始化文件夹。这样hexo就安装好了。</p>
<p>打开你新建的blog目录<code>D:\ProgramFiles\Blog\zrhcode</code>，你会发现多了许多文件夹，在blog根目录下有个_config.yml，这个叫站点配置文件,在themes文件夹里<code>D:\ProgramFiles\Blog\zrhcode\themes\landscape</code>下有个文件夹 _config.yml，这个叫主题配置文件。</p>
<p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">type:</span> git <span class="meta">#注意冒号后空一格</span></span><br><span class="line"><span class="symbol">repo:</span> https://github.com/username/username.github.io.git <span class="meta">#username改为你自己创建的名字</span></span><br><span class="line"><span class="symbol">branch:</span> master</span><br></pre></td></tr></table></figure>

<p>接下来，我们保存站点配置文件，其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。<code>cnpm install hexo-deployer-git --save</code>,这时，我们输入以下命令：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> clean <span class="comment">#清理本地缓存</span></span><br><span class="line">hexo g <span class="comment">#生成本地文件</span></span><br><span class="line">hexo d <span class="comment">#部署到远端，这个由于网速原因，可能会失败，多试几次就好了</span></span><br></pre></td></tr></table></figure>

<p>然后你就可以访问你个人的博客了，如xxxx.github.io，我的时<code>zrhcode.github.io</code></p>
<p>接下来，就来启动我们的博客，输入<code>hexo s</code>,然后再浏览器打开<code>http://localhost:4000/</code></p>
<h3 id="3-6配置主题"><a href="#3-6配置主题" class="headerlink" title="3.6配置主题"></a>3.6配置主题</h3><h4 id="3-6-1更换主题"><a href="#3-6-1更换主题" class="headerlink" title="3.6.1更换主题"></a>3.6.1更换主题</h4><p>landscape是hexo默认的主题，可以更换不同的主题，个人比较推荐的主题有三个：①NexT （排行榜第一，使用的人非常多，很火爆，以简约为主）②yilia（使用的人也很多，左右排版，很好看）③Butterfly（具体没用过，这个受众也挺多的），之所以推荐这些，是因为这些主题比较火爆，所以网上有好多配置教程，你可以百度搜索，配置出自己喜欢的风格。当然了你也可以去hexo-themes下挑选自己喜欢的主题<a href="https://hexo.io/themes/">Themes | Hexo</a></p>
<p>接下来，说说怎么更换主题（其实，博主并不是在搭建博客上耗费了很多时间，而是在配置主题方面花了大量时间，这才导致用了一个星期[手动狗头]），在Git中先切换到新建的blog目录，然后输入<code>git clone https//github.com/litten/hexo-theme-yilia.git themes/yilia</code>这是将yilia主题下载到blog目录的themes主题下的yilia文件夹中。</p>
<p>用记事本打开<strong>站点</strong>的_config.yml配置文件，修改主题为yilia</p>
<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220125214757.png" alt="image-20220125210301746"></p>
<p>修改好后保存，再次部署网站</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo clean </span></span><br><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo s</span></span><br><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure>

<p>到这里我们的博客就搭建完了，剩下具体的主题配置就需要你自己去搞了。</p>
<h4 id="3-6-2配置主题"><a href="#3-6-2配置主题" class="headerlink" title="3.6.2配置主题"></a>3.6.2配置主题</h4><p>这里放一些我在配置过程中找到的文章及视频，希望对你有所帮助：</p>
<p>1.<a href="https://www.bilibili.com/video/BV1pt411K7o9?spm_id_from=333.999.0.0">一步一步教你如何在Windows10上完成hexo博客搭建和yilia主题使用_哔哩哔哩_bilibili</a></p>
<p>2.<a href="https://joeybling.github.io/">https://joeybling.github.io/</a></p>
<p>3.<a href="http://dongshuyan.com/2019/05/24/hexo%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/">http://dongshuyan.com/2019/05/24/hexo%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</a></p>
]]></content>
      <categories>
        <category>技术干货</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记</title>
    <url>/2022/01/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="第一章-Java语言概述"><a href="#第一章-Java语言概述" class="headerlink" title="第一章 Java语言概述"></a>第一章 Java语言概述</h1><h2 id="第一章知识点总览"><a href="#第一章知识点总览" class="headerlink" title="第一章知识点总览"></a>第一章知识点总览</h2><span id="more"></span>

<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220128211928.png" alt="Java第一章"></p>
<h2 id="1-1-Java的起源与发展"><a href="#1-1-Java的起源与发展" class="headerlink" title="1.1 Java的起源与发展"></a>1.1 Java的起源与发展</h2><p>​    Java语言是目前十分流行的面向对象程序设计语言。它具有简单些、跨平台性、安全性、分布性等优点。Java语言不但确立了在网络编程和面向对象编程中的主导地位，而且在移动设备和企业应用开发中也有广泛应用。</p>
<p>​    Java语言最初是由美国Sun Microsystems公司的James Gosling等人开发的一种面向对象的程序设计语言。Java的起源可以追溯到20世纪90年代初，Sun公司提出了一个Green项目，主要开发用于消费类电子产品的嵌入式芯片而设计的软件。Java之父James Gosling最初打算使用C++开发系统，但后来发现C++不能胜任这个工作，于是决定开发一种新的语言。他参考了SmallTalk和C++语言，设计了一个新的语言，该语言被称为Oak（橡树），这就是Java的前身。</p>
<p>​    1993年7月，Sun公司决定把Oak作为产品推出，因此必须注册商标，结果Oak没能通过商标测试，公司必须为该语言取一个新的名字，于是将该语言取名为Java。</p>
<p>​    Java语言于1995年5月23日正式发布。Java语言具有面向对象，平台独立、安全性以及可以开发一种称为Applet程序的特点，该语言的发布立即引起巨大轰动。</p>
<h3 id="1-1-1Java语言的发展历程"><a href="#1-1-1Java语言的发展历程" class="headerlink" title="1.1.1Java语言的发展历程"></a>1.1.1Java语言的发展历程</h3><p>​    Java语言具有强大生命力，其原因之一是不断推出新版本。多年来，Java语言不断发展，演化和修订，一直站在计算机程序设计语言的前沿。从诞生以来，它已经做过多次或大或小的升级。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220202150310.png" alt="java发展历程"></p>
<h3 id="1-1-2Java语言流行程度"><a href="#1-1-2Java语言流行程度" class="headerlink" title="1.1.2Java语言流行程度"></a>1.1.2Java语言流行程度</h3><p>​    TIOBE最新世界编程语言排行榜中前十种语言：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220201185752.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220201190002.png" alt="image-20220201190001834"></p>
<h3 id="1-1-3Java语言的优点"><a href="#1-1-3Java语言的优点" class="headerlink" title="1.1.3Java语言的优点"></a>1.1.3Java语言的优点</h3><p>​    在java诞生时，世界上已经有上千种不同的编程语言，java语言之所以能存在和发展，并具有生命力，是因为它有着其它语言不同的优点。java是简单的（simple）、面向对象的（object oriented）、分布式的（distributed）、解释性的（interpred）、健壮的（robust）、安全的（secure）、体系结构中立的（architecture neutral）、可移植的（portable）、高性能的（high performance）、多线程的（miltithreaded）和动态的（dynamic）。</p>
<h2 id="1-2Java平台与开发环境"><a href="#1-2Java平台与开发环境" class="headerlink" title="1.2Java平台与开发环境"></a>1.2Java平台与开发环境</h2><h3 id="1-2-1Java平台"><a href="#1-2-1Java平台" class="headerlink" title="1.2.1Java平台"></a>1.2.1Java平台</h3><p>​    Java标准版（Java Standard Edition，Java SE） ：用来开发客户端的应用程序，应用程序可以独立运行或作为Applet在Web浏览器中运行。</p>
<p>​    Java企业版（Java Enterprise Edition，Java EE）：用来开发服务器端 的应用程序。例如：Java Servlet和JSP（JavaServer Pages），以及JSF（JavaServer Faces）。</p>
<p>Java微型版（Java Micro Edition，Java ME）：用来开发移动设备（如手机）上运行的应用程序。</p>
<h3 id="1-2-2JDK、JRE和JVM"><a href="#1-2-2JDK、JRE和JVM" class="headerlink" title="1.2.2JDK、JRE和JVM"></a>1.2.2JDK、JRE和JVM</h3><p>​    JDK（Java Development Kit，Java开发工具包）： 包含JRE以及开发工具，面向开发人员使用。（PS：开发用的）</p>
<p>​    JRE（Java Runtime Environment，Java运行时环境）：包含JVM以及运行类库，面向运行人员使用。（PS：运行用的）</p>
<p>​    JVM（Java Virtual Machine，Java虚拟机）：包含字节码等核心内容。（PS：核心所在）</p>
<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220201192312.png" alt="image-20220201192312055"></p>
<h3 id="1-2-3资源下载"><a href="#1-2-3资源下载" class="headerlink" title="1.2.3资源下载"></a>1.2.3资源下载</h3><ul>
<li>JDK的下载地址：<a href="http://www.oracle.com/technetwork/javase/downloads/index.html">http://www.oracle.com/technetwork/javase/downloads/index.html</a> </li>
<li>Eclipse开发工具下载地址：<a href="http://www.eclipse.org/downloads/eclipse-packages/">http://www.eclipse.org/downloads/eclipse-packages/</a></li>
<li>NetBeans开发工具下载地址：<a href="http://netbeans.org/downloads/">http://netbeans.org/downloads/</a></li>
<li>Notepad++下载地址: <a href="https://notepad-plus-plus.org/">https://notepad-plus-plus.org/</a></li>
</ul>
<h2 id="1-3Java程序基本结构"><a href="#1-3Java程序基本结构" class="headerlink" title="1.3Java程序基本结构"></a>1.3Java程序基本结构</h2><h3 id="1-3-1Java程序开发步骤"><a href="#1-3-1Java程序开发步骤" class="headerlink" title="1.3.1Java程序开发步骤"></a>1.3.1Java程序开发步骤</h3><p>​    开发Java程序通常分三步：编辑源程序；编译源程序；执行或调试程序，得到程序输出的结果。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220202161422.png" alt="image-20220202161422753"></p>
<center>java程序的编辑、编译和执行过程</center>

<h3 id="1-3-2第一个程序"><a href="#1-3-2第一个程序" class="headerlink" title="1.3.2第一个程序"></a>1.3.2第一个程序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-1第一个程序分析"><a href="#1-3-2-1第一个程序分析" class="headerlink" title="1.3.2.1第一个程序分析"></a>1.3.2.1第一个程序分析</h4><p>1.类定义</p>
<p>​    Java程序的任何代码都必须放到一个类的定义中，本程序定义一个名为HelloWorld的类。public为类的访问修饰符，class为关键字，其后用一对大括号括起来，称为类体。</p>
<p>2.main()方法</p>
<p>​    Java应用程序的标志是类体中定义的一个main（）方法，称为主方法。主方法是程序执行的入口点，类似于C语言的main（）函数。main（）方法的格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">			……	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    public是方法的访问修饰符，static说明该方法为静态方法，void说明该方法的返回值为空。main（）方法必须带一个字符串数组参数String[] args，可以通过命令行向程序中传递参数。方法的定义也要括在一对大括号中，大阔号内可以书写合法的java语句。</p>
<p>3.输出语句</p>
<p>​    本程序main（）方法中只有一行语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello,World!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>​    该语句的功能是在标准的输出设备上打印输出一个字符串，字符串字面值用双引号定界。java语言的语句要以分号结束。</p>
<p>System为系统类。out为该类中定义的静态成员，是标准的输出设备，通常指显示器。println（）是输出流out张总定义的方法，功能是打印输出字符串并换行。若不带参数，仅起到换行的作用。另一个常用的方法值print（），该方法输出后不换行。</p>
<p>4.源程序命名</p>
<p>​    在java语言中，一个源程序文件被称为一个编译单元。它是包含一个或多个类定义的文本文件。java编译器要求源程序文件必须以java为扩展名。当编译单元中有public类时，主文件必须与public类的类名相同（包括大小写），如本例的源程序文件名应该是HelloWorld.java若编译单元中没有public类，源程序的主文件名可以任意。</p>
<h2 id="1-4程序文档风格和注释"><a href="#1-4程序文档风格和注释" class="headerlink" title="1.4程序文档风格和注释"></a>1.4程序文档风格和注释</h2><h3 id="1-4-1一致的缩进和空白"><a href="#1-4-1一致的缩进和空白" class="headerlink" title="1.4.1一致的缩进和空白"></a>1.4.1一致的缩进和空白</h3><p>​    保持一致的缩进和空白会是程序更加清晰、易读、易于调试和维护。缩进用于描述程序中各部分或语句之间的结构关系。java规范建议的缩进为4个字符。二元操作符的两边也应该各加一个空格，如下面语句所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">3</span>+<span class="number">4</span>*<span class="number">5</span>);  <span class="comment">//不好的风格</span></span><br><span class="line">System.out.println(<span class="number">3</span> + <span class="number">4</span> * <span class="number">5</span>);  <span class="comment">//好的风格</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-4-2块的风格"><a href="#1-4-2块的风格" class="headerlink" title="1.4.2块的风格"></a>1.4.2块的风格</h3><p>​    代码块是由大括号围起来的一组语句块，如类体、方法体、初始化块等。代码块的大括号有两种写法，一是行末格式，即左大括号写在上一行的末尾，右大括号写在下一行，另一种格式称为次行格式，即将左大括号单独写在下一行，右大括号与左大括号垂直对齐，如图所示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span>		//次行格式</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;		<span class="comment">//行末格式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    这两种格式没有好坏之分，但java的文档规范推荐使用行末格式，这样使代码更紧凑，且占据较少空间。</p>
<h3 id="1-4-3Java程序注释"><a href="#1-4-3Java程序注释" class="headerlink" title="1.4.3Java程序注释"></a>1.4.3Java程序注释</h3><p>​    java源程序支持三种类型注释：</p>
<p>（1）单行注释，以双斜杠开头，在该行的末尾结束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是一个单行注释，在Eclipse中快捷键ctrl+/(添加注释)</span></span><br></pre></td></tr></table></figure>

<p>（2）多行注释，以<code>/*</code>开始，以<code>*/</code>结束的一行或多行文字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	这是一个多行注释，在Eclipse中快捷键为ctrl+shift+\(添加注释),ctrl+shift+/(取消注释)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>（3）文档注释，以<code>/**</code>开始，以<code>*/</code>结束的多行。文档注释是java特有的，主要用来生成类定义的API文档                                                                                       </p>
<h1 id="第二章Java语言基础"><a href="#第二章Java语言基础" class="headerlink" title="第二章Java语言基础"></a>第二章Java语言基础</h1><h2 id="第二章知识点总览"><a href="#第二章知识点总览" class="headerlink" title="第二章知识点总览"></a>第二章知识点总览</h2><p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220202161326.png" alt="第二章知识点概览"></p>
<h3 id="2-1简单程序的开发"><a href="#2-1简单程序的开发" class="headerlink" title="2.1简单程序的开发"></a>2.1简单程序的开发</h3><h4 id="2-1-1-从键盘读取数据"><a href="#2-1-1-从键盘读取数据" class="headerlink" title="2.1.1 从键盘读取数据"></a>2.1.1 从键盘读取数据</h4><p>​    要从键盘读取数据可以使用Scanner类的nextInt（）方法或nextDouble方法。首先创建Scanner类的一个实例，然后调用nextDouble（）方法读取double数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ComputeArea.java</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//由于Scanner类存放在Java.util包中，因此程序使用import语句导入该类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputeArea</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> radius;</span><br><span class="line">        <span class="keyword">double</span> area;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//创建一个Scanner实例input</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入半径值：&quot;</span>);</span><br><span class="line">        radius = input.nextDouble(); <span class="comment">//通过input实例读取一个double型数</span></span><br><span class="line">        area = Math.PI * radius * radius;</span><br><span class="line">        System.out.println(<span class="string">&quot;圆的面积为：&quot;</span> + area);   </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//程序运行结果如下：</span></span><br><span class="line">请输入半径值：<span class="number">10</span></span><br><span class="line">圆的面积为：<span class="number">314.1592653589793</span></span><br></pre></td></tr></table></figure>

<p>​    使用Scanner类对象还可以从键盘上读取其他数据类型的数据，如nextInt（）读取一个整数，nextLine（）读取一行文本。</p>
<h4 id="2-1-2变量与赋值"><a href="#2-1-2变量与赋值" class="headerlink" title="2.1.2变量与赋值"></a>2.1.2变量与赋值</h4><p>​    变量（variable）是在程序运行中气质可以改变的量。一个变量通常由三个要素组成，即数据类型、变量名和变量值。Java有两种类型的变量：基本类型的变量和引用类型的变量。基本类型的变量包括数值型（整数型和浮点型）、布尔型和字符型。引用类型的变量包括类、接口、枚举和数组等。</p>
<p>​    变量在使用使用之前必须定义，变量定义包括声明和赋值。变量声明的一般格式为：</p>
<center>type varName[=value][,valueName[=value]...];</center>

<p>​    其中，type为变量数据类型，varName为变量名，value为变量值。下面声明了几个不同类型的变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">double</span> d1,d2;</span><br><span class="line"><span class="keyword">char</span> ch1,ch2;</span><br></pre></td></tr></table></figure>

<p>​    使用赋值运算符“=”给变量赋值，一般称为变量的初始化。下面是几个赋值语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">age = <span class="number">21</span>;</span><br><span class="line">ch1 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">d1 = d2 = <span class="number">0.618</span>;  <span class="comment">//可以一次给多个变量赋值</span></span><br></pre></td></tr></table></figure>

<p>​    也可以在声明时给变量赋值。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>

<p>​    变量的格式：</p>
<p>​        方案一（两个步骤）</p>
<p>​            1.创建一个变量，格式：                  <strong>数据类型 变量名称;</strong></p>
<p>​            2.放入一些数据，格式：                  <strong>变量名称 = 数据值;</strong></p>
<p>​        方案二（一个步骤）</p>
<p>​            创建变量的同时立刻放入数据，格式：<strong>数据类型 变量名称 = 数据值;</strong></p>
<h4 id="2-1-3Java标识符"><a href="#2-1-3Java标识符" class="headerlink" title="2.1.3Java标识符"></a>2.1.3Java标识符</h4><ul>
<li><p>作用：给类、变量、包、方法等起名字。</p>
</li>
<li><p>组成规则（硬性规定）</p>
<ol>
<li><p>只能由字符、下划线（_）、美元符（$）组成。这里的字符包括大小写字母、中文字符、数字字符等，但符号只能有两个：下划线和美元符$；</p>
</li>
<li><p>不能以数字开头；</p>
</li>
<li><p>不能是Java中的关键字。</p>
</li>
</ol>
</li>
<li><p>命名规则（软性建议）</p>
<ol>
<li><p>基本要求：见名知意。</p>
</li>
<li><p>建议只使用英文字母和数字。</p>
</li>
<li><p>常见命名的规则：</p>
<p> a)    类<br>  每个单词首字母大写，例如Student、HelloWorld。</p>
<p> b)   变量<br>  第一个单词完全小写，后续更多单词首字母大写，例如age、ageOfMyGirlfriend。</p>
<p> c)    方法<br>  与变量规则一样，例如show()、getAge()。</p>
<p> d)   包（其实就是文件夹，用于对类进行管理）<br>  全部小写，多级包用点隔开。公司域名的反写。com.demo    （相当于两级文件夹：com\demo）</p>
</li>
</ol>
</li>
</ul>
<p>​    不推荐使用无意义的单个字母命名标识符，应该使用有意义的单词或单词组合为对象命名。有两种命名方法：PascalCase和camelCase。</p>
<p>​    PascalCase称为帕斯卡拼写法，即将命名的所有单词首字母大写，然后直接连接起来，单词之间没有连接符，如NumberOfStudent，BankAccount等。</p>
<p>​    camelCase称为骆驼拼写法，它与PascalCase拼写法的不同之处是将第一个单词的首字母小写，如firstName，currentValue等。</p>
<h4 id="2-1-4Java关键字"><a href="#2-1-4Java关键字" class="headerlink" title="2.1.4Java关键字"></a>2.1.4Java关键字</h4><ul>
<li>概念：关键字是被Java语言赋予特殊含义，具有专门用途的单词。比如之前接触的class，public，static，void均为Java已经预设好的</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220204171332.png" alt="image-20220204171302496"></p>
<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220204171356.png" alt="image-20220204171312540"></p>
<h3 id="2-2数据类型"><a href="#2-2数据类型" class="headerlink" title="2.2数据类型"></a>2.2数据类型</h3><h4 id="2-2-1数据类型概述"><a href="#2-2-1数据类型概述" class="headerlink" title="2.2.1数据类型概述"></a>2.2.1数据类型概述</h4><p>​    Java语言的数据类型可分为基本数据类型(primitive data type)和引用数据类型(refererce data type)，如图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/zrhcode/Pictures/Img/20220204180119.png" alt="image-20220204180119479"></p>
<h4 id="2-2-2字面值和常量"><a href="#2-2-2字面值和常量" class="headerlink" title="2.2.2字面值和常量"></a>2.2.2字面值和常量</h4><p>​    字面值是某种类型值的表示形式，如100是int类型的字面值。字面值有三种类型：基本类型的字面值、字符串字面值以及null字面值。</p>
<p>​    常量是在程序运行过程中，其值不能被改变的量。常量实际上是由一个final关键字修饰的变量，一旦为其赋值，其值在程序运行中就不能被改变。常量可以在声明时赋值，也可以声明后赋值。不管哪种情况，一旦赋值便不允许修改。常量的命名应该全部大写并用下划线将此分隔开。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> SNO;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.1415926</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术干货</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
